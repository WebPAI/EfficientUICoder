import re
def clean_generated_html(text: str) -> str:
    """
    Clean the HTML content generated by a large language model.
    Extracts ```html and ```css blocks and merges them,
    handling cases where the closing markers might be missing.
    """
    text = text.strip()

    # Step 1: Extract HTML block
    html_match = re.search(r"```html\s*(.*?)(```|$)", text, flags=re.DOTALL | re.IGNORECASE)
    html_code = html_match.group(1).strip() if html_match else ""

    # Step 2: If HTML block not found, try extracting <html> ... </html> content
    if not html_code:
        html_tag_match = re.search(r"(<html.*?</html>)", text, flags=re.DOTALL | re.IGNORECASE)
        if html_tag_match:
            html_code = html_tag_match.group(1).strip()
        else:
            print("[WARN] No HTML content found, returning raw text")
            return text  # Do not raise, just return the original text

    # Step 3: Extract CSS block (if present)
    css_match = re.search(r"```css\s*(.*?)(```|$)", text, flags=re.DOTALL | re.IGNORECASE)
    css_code = css_match.group(1).strip() if css_match else ""

    # Step 4: Merge CSS into a <style> tag inside the HTML
    if css_code:
        if "<style>" in html_code:
            # If a <style> tag already exists, append the CSS
            html_code = re.sub(
                r"<style>(.*?)</style>",
                lambda m: f"<style>\n{m.group(1).strip()}\n{css_code}\n</style>",
                html_code,
                flags=re.DOTALL,
            )
        else:
            # If no <style> tag exists, insert before </head>
            if re.search(r"</head>", html_code, re.IGNORECASE):
                html_code = re.sub(
                    r"(</head>)",
                    f"<style>\n{css_code}\n</style>\n\\1",
                    html_code,
                    count=1,
                    flags=re.IGNORECASE,
                )
            else:
                # If there is no <head> tag, prepend the CSS at the top
                html_code = f"<style>\n{css_code}\n</style>\n" + html_code

    return html_code.strip()
